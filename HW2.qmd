---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 15 @ 11:59PM
author: Cordelia Lee UID 105361901
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:

```{r}
#| eval: true
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(data.table)
library(lubridate)
library(R.utils)
library(tidyverse)
library(dplyr)
```

MIMIC data location

```{r}
#mimic_path <-"C:\\Users\\Cordelia\\mimic"<- "~/mimic"
mimic_path <- "C:\\Users\\Cordelia\\mimic-iv-1.0"
```

Comment: the link is not working for my laptop because the home setting for R . Dr. Zhou provided this temporary solution so that I can continue to work on this homework.

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2023winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

Display the contents of MIMIC data folder.

```{bash}
ls -l ~/mimic/
```

```{bash}
ls -l ~/mimic/core/
```

```{bash}
ls -l ~/mimic/hosp/

```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three programs: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the popular data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? (Hint: R function `system.time` measures run times.)

For later questions, we stick to the `read_csv` in tidyverse.

```{r}
system.time(read.csv(str_c(mimic_path, "/core/admissions.csv.gz")))
# read_csv("~/mimic/core/admissions.csv.gz")
system.time(read_csv(str_c(mimic_path, "/core/admissions.csv.gz")))
system.time(fread(str_c(mimic_path, "/core/admissions.csv.gz")))

```

Ans: the one that appears to be the fastest is the read.csv function. The read_csv one seemed to be the slowest. There is a difference between the default and the one in tidyverse. read_csv noticed some issues with the column.

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
zcat ~/mimic/icu/icustays.csv.gz | head -10

```

1.  Import `icustatys.csv.gz` as a tibble `icustays_tble`.

    ```{r}
    icu<-(read_csv(str_c(mimic_path, "/icu/icustays.csv.gz")))
    icustays_tble <- as.tibble(icu)
    ```

2.  How many unique `subject_id`? Can a `subject_id` have multiple ICU stays?

    ```{r}

    n_distinct (icustays_tble$subject_id)

    ```

3.  Summarize the number of ICU stays per `subject_id` by graphs.

    ```{r}
    icu_count<-icustays_tble %>% 
      group_by(subject_id)%>% 
      summarise(COUNT = n())
    hist(x=icu_count$COUNT, main="ICU stays of a patient")
    ```

4.  For each `subject_id`, let's only keep the first ICU stay in the tibble `icustays_tble`. (Hint: `slice_min` and `slice_max` may take long. Think alternative ways to achieve the same function.)

    ```{r}
    icustays_tble <- icustays_tble %>%
      group_by(subject_id) %>%
      arrange(intime, .by_group = TRUE) %>%
      slice_head(n=1)%>%
      ungroup()%>%
      print(width = Inf)
    #distinct would also work
    #   arrange(subject_id, intime) %>%
    #   distinct(subject_id, .keep_all = TRUE) %>%
    ```

## Q3. `admission` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/core/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
zcat ~/mimic/core/admissions.csv.gz| head -10

```

1.  Import `admissions.csv.gz` as a tibble `admissions_tble`.

    ```{r}
    admin<-(read_csv(str_c(mimic_path, "/core/admissions.csv.gz")))
    admissions_tble <- as.tibble(admin)
    ```

2.  Let's only keep the admissions that have a match in `icustays_tble` according to `subject_id` and `hadmi_id`.

    ```{r}
    # admissions_tble <-admissions_tble%>%
    #   semi_join(icustays_tble, by=c('subject_id','hadmi_id'))%>%
    #   print(width=Inf)
    semi_join(x = admissions_tble, y = icustays_tble, by = c("subject_id", "hadm_id"))
    ```

3.  Summarize the following variables by graphics.

    -   admission year\

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=year(admittime)))+
      geom_bar() +
      labs(x="admission year")

    ```

    -   admission month\

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=months.Date(admittime))) +
      geom_bar() +
      labs(x="admission month")
    ```

    -   admission month day

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=mday(admittime)))+
      geom_bar()+
      labs(x="admission month day")
    ```

    -   admission week day\

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=weekdays.Date(admittime)))+
      geom_bar()+
      labs(x="admission week day")
    ```

    -   admission hour (anything unusual?)\
        There are a lot of patients admitted at midnight, which are likely results of randomly inputting because it was not recorded.

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=hour(admittime)))+
      geom_bar()+
      labs(x="admission hour")
    ```

    -   admission minute (anything unusual?)\
        There are also a lot of patients admitted at 0 hours, which may be due to similar reasons as above with admission hour.

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=minute(admittime)))+
      geom_bar()+
      labs(x="admission minute")
    ```

    -   length of hospital stay (anything unusual?)\
        There are patients with 0 hours of hospital stay.

    ```{r}
    admissions_tble %>%
      ggplot(aes(x=difftime(dischtime,admittime, unit="hours")))+
      geom_bar()+
      xlim(0,1800)+
      ylim(0,130)+
      labs(x = "length of hispital stay by hour")
    ```

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/core/patients/> for details of each field in this file. The first 10 lines are

```{bash}
zcat ~/mimic/core/patients.csv.gz| head -10
```

1.  Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/core/patients/>) as a tibble `patients_tble` and only keep the patients who have a match in `icustays_tble` (according to `subject_id`).

    ```{r}
    patients_tble<-
      read_csv(str_c(mimic_path, "/core/patients.csv.gz")) %>%
      semi_join (icustays_tble, by = "subject_id") %>%
      print (width = Inf)
    ```

2.  Summarize variables `gender` and `anchor_age`, and explain any patterns you see.

    ```{r}
    patients_tble %>%
      ggplot(aes(x=gender))+
      geom_bar()+
      labs(x="gender")
    ```

    There are more males than females in the patients_tble.

    ```{r}
    patients_tble %>%
      ggplot(aes(x=anchor_age, fill=gender))+
      geom_bar()+
      labs(x="anchor_age")
    ```

There is an unusual amount of people who are 91 years old and no one for 90 and below 18. It is likely that the participants below 18 were rare and categorized as 18. Patients above 90 are recorded as 91.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
zcat ~/mimic//hosp/labevents.csv.gz| head -10
```

`d_labitems.csv.gz` is the dictionary of lab measurements.

```{bash}
zcat ~/mimic//hosp/d_labitems.csv.gz| head -10
```

1.  Find how many rows are in `labevents.csv.gz`.

    ```{bash}
    zcat ~/mimic/hosp/labevents.csv.gz | tail -n +2 | wc -l
    ```

Ans: There are 122103667 rows excluding the first line of column names in the data frame.

2.  We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` only containing these items for the patients in `icustays_tble` as a tibble `labevents_tble`.

    Hint: `labevents.csv.gz` is a data file too big to be read in by the `read_csv` function in its default setting. Utilize the `col_select` option in the `read_csv` function to reduce the memory burden. It took my computer 5-10 minutes to ingest this file. If your computer really has trouble importing `labevents.csv.gz`, you can import from the reduced data file `labevents_filtered_itemid.csv.gz`.

```{r}
dlabitems_tble<-read_csv(str_c(mimic_path,"/hosp/d_labitems.csv.gz"))%>%
    filter(itemid %in% c(
      50912,
      50971,
      50983,
      50902,
      50882,
      51221,
      51301,
      50931
      ))%>%
    print(width=Inf)
```

```{r}
    labevents_tble<-
      read_csv(str_c(mimic_path, "/hosp/labevents_filtered_itemid.csv.gz"), 
               col_select = c(subject_id,itemid,charttime,valuenum),
               col_types = cols_only(subject_id=col_double(),
                                     itemid=col_double(),
                                     charttime=col_datetime(),
                                     valuenum=col_double())
               )%>%
      semi_join(icustays_tble,by=c("subject_id"))%>%
      filter(itemid %in% dlabitems_tble$itemid)%>%
      print(width=Inf)
```

3.  Further restrict `labevents_tble` to the first lab measurement during the ICU stay.

```{r}
    labevents_tble<-labevents_tble %>%
      #only keep items during the first ICU stay
      left_join(select(icustays_tble, subject_id, intime, outtime),
     by = c( "subject_id")) %>% 
      filter(charttime >= intime & charttime <= outtime) %>%
       group_by(subject_id, itemid) %>%
      arrange (charttime, .by_group= TRUE) %>%
       slice_head(n=1) %>%
       ungroup() %>%
      # important to take out before pivot_wider or else multiple rows for an itemid woll be produced
       select(-intime,-outtime,-charttime) %>%
       pivot_wider(names_from = itemid, values_from=valuenum) %>%
      rename_at(
        vars(as.character(dlabitems_tble$itemid)),
             ~str_to_lower(dlabitems_tble$label)
      ) %>%
      rename(WBC="white blood cells") %>%
       print (width=Inf) 
    
```

4.  Summarize the lab measurements by appropriate numerics and graphics.

```{r}
labevents_tble %>%
  ggplot(aes(x=WBC))+
  geom_histogram(bins=60)+
  xlim(0,100)
  labs(x="white blood cells")

```

```{r}
labevents_tble %>%
  ggplot(aes(x=sodium))+
  geom_bar()+
  labs(x="sodium")

```

```{r}
labevents_tble %>%
  ggplot(aes(x=glucose))+
  geom_bar()+
  xlim(0,1000)+
  labs(x="glucose")
```

Ans: From the graphs above, we can see that the mode white blood cell count is around 12 to 13. The sodium labs seems to be normally distributed. Lastly, there are a few outliers in the glucose measurements, which might be patients that are diabetic.

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient's information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat ~/mimic/icu/chartevents.csv.gz | head -10
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat ~/mimic/icu/d_items.csv.gz | head -10
```

1.  We are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble` as a tibble `chartevents_tble`.

    Hint: `chartevents.csv.gz` is a data file too big to be read in by the `read_csv` function in its default setting. Utilize the `col_select` option in the `read_csv` function to reduce the memory burden. It took my computer \>15 minutes to ingest this file. If your computer really has trouble importing `labevents.csv.gz`, you can import from the reduced data file `chartevents_filtered_itemid.csv.gz`.

    ```{r}
    chart_tble<-read_csv(str_c(mimic_path,"/icu/d_items.csv.gz"))%>%
        filter(itemid %in% c(
          220045,
          220181,
          220179,
          223761,
          220210
          ))%>%
        print(width=Inf)
    ```

    ```{r}
    chartevents_tble<-
          read_csv(str_c(mimic_path, "/icu/chartevents_filtered_itemid.csv.gz"), 
                   col_select = c(subject_id,itemid,charttime,valuenum),
                   col_types = cols_only(subject_id=col_double(),
                                         itemid=col_double(),
                                         charttime=col_datetime(),
                                         valuenum=col_double())
                   )%>%
          semi_join(icustays_tble,by=c("subject_id"))%>%
          filter(itemid %in% chart_tble$itemid)%>%
          print(width=Inf)
    ```

2.  Further restrict `chartevents_tble` to the first vital measurement during the ICU stay.

    ```{r}
    chartevents_tble<-chartevents_tble %>%
          #only keep items during the frist ICU stay
          left_join(select(icustays_tble, subject_id, intime, outtime),
         by = c( "subject_id")) %>% 
          filter(charttime >= intime & charttime <= outtime) %>%
           group_by(subject_id, itemid) %>%
          arrange (charttime, .by_group= TRUE) %>%
           slice_head(n=1) %>%
           ungroup() %>%
          # important to take out before pivot_wider or else multiple rows for an itemid woll be produced
           select(-intime,-outtime,-charttime) %>%
           pivot_wider(names_from = itemid, values_from=valuenum) %>%
          rename_at(
            vars(as.character(chart_tble$itemid)),
                 ~str_to_lower(chart_tble$label)
          ) %>%
          rename(HR="heart rate") %>%
           print (width=Inf) 
    ```

3.  Summarize these vital measurements by appropriate numerics and graphics.

    ```{r}
    chartevents_tble %>%
      ggplot(aes(x=HR))+
      geom_histogram()+
      xlim(0,200)
      labs(x="heart rate")
    ```

There is an outlier in heart rate that has abnormally high heart rate.

```{r}
chartevents_tble %>%
  ggplot(aes(x=`respiratory rate`))+
  geom_histogram()+
  labs(x="respiratory rate distribution")
```

Respiratory rate seem to be slightly skewed to the right, which makes sense because the extremes are rare conditions.

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are the first ICU stay of each unique adult (age at admission \> 18) and columns contain at least following variables

-   all variables in `icustays.csv.gz`\

-   all variables in `admission.csv.gz`\

-   all variables in `patients.csv.gz`\

-   first lab measurements during ICU stay\

-   first vital measurements during ICU stay

-   an indicator variable `thirty_day_mort` whether the patient died within 30 days of hospital admission (30 day mortality)

    ```{r}
    mimic_icu_cohort<- icustays_tble %>%
        left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
        left_join(patients_tble, by = c("subject_id")) %>%
        left_join(labevents_tble, by = c("subject_id")) %>%
        left_join(chartevents_tble, by = c("subject_id")) %>%
        mutate(admit_age = anchor_age + year(admittime) - anchor_year) %>%
        # keep only patients aged over 18 at admission
        filter(admit_age > 18) %>%
      print(width=Inf)

    ```

    ```{r}
    # create thirty_day_mort
    mimic_icu_cohort<-mimic_icu_cohort %>% 
      mutate(thirty_day_mort = 
                 ifelse(is.na(deathtime), "FALSE", 
                        ifelse(as.Date(deathtime) - as.Date(admittime) <= 30, 
                               "TRUE", "FALSE"))) %>%
      print (width=Inf)
    ```

```{r}
# count of TRUE FAlSE numbers in thirty_day_mort
sum(mimic_icu_cohort$thirty_day_mort==TRUE)
sum(mimic_icu_cohort$thirty_day_mort==FALSE)

```

## Q8. Exploratory data analysis (EDA)

Summarize following information using appropriate numerics or graphs.

-   `thirty_day_mort` vs demographic variables (ethnicity, language, insurance, marital_status, gender, age at hospital admission)

    ```{r}
    mimic_icu_cohort %>%
      ggplot() +
      geom_bar(mapping = aes(x = thirty_day_mort, fill = ethnicity), 
               position = "fill") +
      labs(x = "30 day mortality", y = "percent") +
      labs(title = "30 day mortality vs ethnicity") 

    ```

    Ans: White has the greatest percentage of 30 day mortality.

    ```{r}
    mimic_icu_cohort %>%
      ggplot() +
      geom_bar(mapping = aes(x = thirty_day_mort, fill = language), 
               position = "fill") +
      labs(x = "30 day mortality", y = "percent") +
      labs(title = "30 day mortality vs language") 
    ```

    Ans:A large percentage of 30 day mortality population speaks English.

    ```{r}
    mimic_icu_cohort %>%
      ggplot() +
      geom_bar(mapping = aes(x = thirty_day_mort, fill = insurance), 
               position = "fill") +
      labs(x = "30 day mortality", y = "percent") +
      labs(title = "30 day mortality vs insurance") 
    ```

    Ans:There are higher percentages of people relying on medicare when 30 day mortality is true, whereas, more people rely on medicaid when it is false.

    ```{r}
    mimic_icu_cohort %>%
      ggplot() +
      geom_bar(mapping = aes(x = thirty_day_mort, fill = gender), 
               position = "fill") +
      labs(x = "30 day mortality", y = "percent") +
      labs(title = "30 day mortality vs gender") 
    ```

    Ans: The percentages of 30 day mortality between the two genders do not differ much.

    ```{r}

    mimic_icu_cohort %>%
      ggplot(aes(x=admit_age, fill= thirty_day_mort))+
      geom_histogram()+
      labs(title="Summary of mortality and hospital admission age")
    ```

    Ans: From the graph above, we can see that the admit age for people who passed away within thirty days of hospital admissions are skewed to the left, which is among the older population.

-   `thirty_day_mort` vs first lab measurements

    ```{r}

    mimic_icu_cohort %>%
      ggplot(aes(x=hematocrit, fill= thirty_day_mort))+
      geom_bar()+
      labs(title="Summary of mortality and hematocrit")

    ```

    Ans: I summarized the first hematocrit lab results. It appears to be normally distributed for both groups.

-   `thirty_day_mort` vs first vital measurements

    ```{r}
    mimic_icu_cohort %>%
      ggplot(aes(x=HR, fill= thirty_day_mort))+
      geom_bar()+
      labs(title="Summary of thirty day mortality and first vital measures")
    ```

    Ans: I summarized the heart rate for the two groups and the distribution seems to be the same. Population that passed away within 30 days of hospital admissions seemed to be less peaked.

-   `thirty_day_mort` vs first ICU unit

    ```{r}

    mimic_icu_cohort %>%
      ggplot(aes(x=first_careunit, fill= thirty_day_mort))+
      geom_bar()+
      scale_x_discrete(guide = guide_axis(n.dodge=5))+
      labs(title="Summary of mortality and hospital admission age")
    ```

![](http://127.0.0.1:60495/chunk_output/s/E509E4DB/c3cauga46u3dr/000010.png?resize=6)

Ans: The care unit that has the highest 30 day mortality count is MICU, which is reasonable because patients get admitted to MICU when they are critically ill.
